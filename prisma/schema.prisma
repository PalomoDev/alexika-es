generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id
  name          String
  email         String
  emailVerified Boolean
  image         String? // Оставляем как есть для авторизации
  createdAt     DateTime
  updatedAt     DateTime

  // Дополнительные поля для вашего приложения
  role          String  @default("user")
  address       Json?   @db.Json
  paymentMethod String?

  // Связи для аутентификации
  sessions Session[]
  accounts Account[]

  // Связи для вашего приложения
  carts   Cart[]
  orders  Order[]
  reviews Review[]

  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@unique([identifier, value])
  @@map("verification")
}

// ========================================
// IMAGE MODEL - Централизованное управление изображениями
// ========================================

model Image {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  filename  String    @unique // "product_abc123.jpg"
  url       String    @unique // "/uploads/product_abc123.jpg"
  alt       String? // Alt текст для изображения
  sortOrder Int       @default(0) // Приоритет сортировки (используется для продуктов)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @db.Timestamp(6)
  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@index([sortOrder])
  @@map("images")
}

// ========================================
// PRODUCT MODELS - Основные модели товаров
// ========================================

// Категории товаров (палатки, спальные мешки, рюкзаки и т.д.)
model Category {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String // "Палатки", "Спальные мешки"
  slug        String   @unique // "palatki", "spalnie-meshki"
  description String? // Описание категории
  imageIds    String[] @default([]) @db.Uuid // Массив ID изображений
  isActive    Boolean  @default(true) // Активна ли категория
  sortOrder   Int      @default(0) // Порядок сортировки в меню
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @db.Timestamp(6)

  // Связи
  products               Product[] // Товары в этой категории
  categorySubcategories  CategorySubcategory[] // Связь с подкатегориями через промежуточную таблицу
  categorySpecifications CategorySpecification[] // Спецификации для категории
  Feature                Feature[]

  @@index([isActive])
  @@index([sortOrder])
  @@map("categories")
}

// Подкатегории товаров (2-местные палатки, зимние спальники и т.д.)
model Subcategory {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String // "2-местные", "Экспедиционные", "Зимние", "Водонепроницаемые"
  slug        String   @unique // Теперь глобально уникальный
  description String? // Описание подкатегории
  imageIds    String[] @default([]) @db.Uuid // Массив ID изображений
  isActivity  Boolean  @default(false) // Является ли субкатегория активностью (для отображения в меню активностей)
  isActive    Boolean  @default(true) // Активна ли подкатегория
  sortOrder   Int      @default(0) // Общий порядок сортировки
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @db.Timestamp(6)

  // Связи
  categorySubcategories CategorySubcategory[] // Связь с категориями через промежуточную таблицу
  productSubcategories  ProductSubcategory[] // Связь с товарами через промежуточную таблицу

  @@index([isActive])
  @@index([sortOrder])
  @@index([isActivity])
  @@map("subcategories")
}

// Связующая таблица между категориями и подкатегориями
model CategorySubcategory {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  categoryId    String   @db.Uuid
  subcategoryId String   @db.Uuid
  sortOrder     Int      @default(0) // Порядок подкатегории в конкретной категории
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @updatedAt @db.Timestamp(6)

  // Связи
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subcategory Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)

  // Уникальная пара
  @@unique([categoryId, subcategoryId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([sortOrder])
  @@map("category_subcategories")
}

// Связующая таблица между товарами и подкатегориями (many-to-many)
model ProductSubcategory {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId     String   @db.Uuid
  subcategoryId String   @db.Uuid
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @updatedAt @db.Timestamp(6)

  // Связи
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  subcategory Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)

  // Уникальная пара - товар не может иметь одну подкатегорию дважды
  @@unique([productId, subcategoryId])
  @@index([productId])
  @@index([subcategoryId])
  @@map("product_subcategories")
}

// Бренды товаров
model Brand {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique // "Coleman", "The North Face", "Deuter"
  slug        String   @unique // "coleman", "the-north-face", "deuter"
  description String? // Описание бренда
  imageIds    String[] @default([]) @db.Uuid // Массив ID изображений (логотип)
  website     String? // Сайт бренда
  isActive    Boolean  @default(true) // Активен ли бренд
  sortOrder   Int      @default(0) // Порядок сортировки
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @db.Timestamp(6)

  // Связи
  products Product[] // Товары этого бренда

  @@index([isActive])
  @@index([sortOrder])
  @@map("brands")
}

// ========================================
// SPECIFICATION MODELS - Модели спецификаций
// ========================================

// Справочник всех возможных спецификаций
model Specification {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique // "Количество мест", "Температура комфорта", "Вес", "Материал"
  key         String   @unique // "capacity", "temperature", "weight", "material" - для программного доступа
  description String? // "Максимальное количество спящих мест", "Температура комфортного сна"
  unit        String? // "места", "°C", "кг", "мм", "л"
  type        String // "number", "text", "select", "boolean", "range"
  imageIds    String[] @default([]) @db.Uuid
  category    String? // Tiends Sacos
  isActive    Boolean  @default(true) // Активна ли спецификация
  sortOrder   Int      @default(0) // Общий порядок сортировки
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @db.Timestamp(6)

  // Связи
  productSpecifications ProductSpecificationValue[] // Значения у товаров
  categorySpecs         CategorySpecification[] // Связь с категориями

  @@index([isActive])
  @@index([category])
  @@index([type])
  @@map("specifications")
}

// Какие спецификации должны быть у товаров определенной категории
model CategorySpecification {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  categoryId      String   @db.Uuid
  specificationId String   @db.Uuid
  isRequired      Boolean  @default(false) // Обязательная ли спецификация для этой категории
  sortOrder       Int      @default(0) // Порядок отображения спецификации в категории
  createdAt       DateTime @default(now()) @db.Timestamp(6)
  updatedAt       DateTime @updatedAt @db.Timestamp(6)

  // Связи
  category      Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  specification Specification @relation(fields: [specificationId], references: [id], onDelete: Cascade)

  // Уникальная пара - категория не может иметь дубли спецификации
  @@unique([categoryId, specificationId])
  @@index([categoryId])
  @@index([specificationId])
  @@index([sortOrder])
  @@map("category_specifications")
}

// Конкретные значения спецификаций для каждого товара
model ProductSpecificationValue {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId       String   @db.Uuid
  specificationId String   @db.Uuid
  value           String // "4", "-10", "Полиэстер", "true", "S-M-L"
  createdAt       DateTime @default(now()) @db.Timestamp(6)
  updatedAt       DateTime @updatedAt @db.Timestamp(6)

  // Связи
  product       Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  specification Specification @relation(fields: [specificationId], references: [id], onDelete: Cascade)

  // Товар не может иметь дубли одной спецификации
  @@unique([productId, specificationId])
  @@index([productId])
  @@index([specificationId])
  @@map("product_specification_values")
}

// Основная модель товара
model Product {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String // Название товара
  slug        String   @unique(map: "product_slug_idx") // URL-friendly название
  sku         String   @unique // Артикул товара (Stock Keeping Unit)
  categoryId  String   @db.Uuid // Связь с категорией
  brandId     String   @db.Uuid // Связь с брендом
  imageIds    String[] @default([]) @db.Uuid // Массив ID изображений (галерея)
  description String // Описание товара
  stock       Int // Количество на складе
  price       Decimal  @default(0) @db.Decimal(12, 2) // Цена
  rating      Decimal  @default(0) @db.Decimal(3, 2) // Рейтинг (0-5)
  numReviews  Int      @default(0) // Количество отзывов
  isFeatured  Boolean  @default(false) // Рекомендуемый товар
  isActive    Boolean  @default(true) // Активен ли товар
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @db.Timestamp(6)

  // Связи
  category             Category                    @relation(fields: [categoryId], references: [id])
  brand                Brand                       @relation(fields: [brandId], references: [id])
  productSubcategories ProductSubcategory[] // Связь с подкатегориями через промежуточную таблицу
  specificationValues  ProductSpecificationValue[] // Значения спецификаций товара
  features             ProductFeature[] // Особенности товара (иконки: водостойкий, легкий и т.д.)
  OrderItem            OrderItem[] // Позиции в заказах
  Review               Review[] // Отзывы о товаре

  // Индекс для быстрого поиска по артикулу
  @@index([categoryId])
  @@index([brandId])
  @@index([isFeatured])
  @@index([isActive])
  @@index([sku])
  @@map("products")
}

// ========================================
// FEATURE MODELS - Модели особенностей товаров
// ========================================

// Особенности товаров (водостойкость, легкость и т.д.)
model Feature {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String // "Водостойкий", "Легкий", "Ветрозащитный"
  key         String   @unique // "waterproof", "lightweight", "windproof" - для программного доступа
  imageIds    String[] @default([]) @db.Uuid // Массив ID изображений (иконки)
  description String? // "Защита от влаги до 3000мм", "Вес менее 2кг"
  categoryId  String?  @db.Uuid // Необязательная связь с категорией
  isActive    Boolean  @default(true) // Активна ли особенность
  sortOrder   Int      @default(0) // Порядок отображения
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @db.Timestamp(6)

  // Связи
  category        Category?        @relation(fields: [categoryId], references: [id])
  productFeatures ProductFeature[] // Товары с этой особенностью

  @@index([isActive])
  @@map("features")
}

// Связь между товарами и их особенностями (many-to-many)
model ProductFeature {
  productId String @db.Uuid
  featureId String @db.Uuid

  // Связи
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  feature Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@id([productId, featureId])
  @@map("product_features")
}

// ========================================
// SHOPPING MODELS - Модели покупок
// ========================================

// Корзина пользователя
model Cart {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String? // Связь с пользователем (может быть null для гостей)
  sessionCartId String // ID сессии для гостевых корзин
  items         Json[]   @default([]) @db.Json // Товары в корзине
  itemsPrice    Decimal  @db.Decimal(12, 2) // Стоимость товаров
  totalPrice    Decimal  @db.Decimal(12, 2) // Общая стоимость
  shippingPrice Decimal  @db.Decimal(12, 2) // Стоимость доставки
  taxPrice      Decimal  @db.Decimal(12, 2) // Налоги
  totalWeight   Decimal? @db.Decimal(12, 1)
  setOrder      Boolean? @default(false)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @updatedAt @db.Timestamp(6)

  // Связь с User (используем String вместо @db.Uuid для совместимости)
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionCartId])
  @@map("carts")
}

// Заказы
model Order {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String // Связь с пользователем
  shippingAddress Json      @db.Json // Адрес доставки
  paymentMethod   String // Способ оплаты
  paymentResult   Json?     @db.Json // Результат платежа
  itemsPrice      Decimal   @db.Decimal(12, 2) // Стоимость товаров
  shippingPrice   Decimal   @db.Decimal(12, 2) // Стоимость доставки
  taxPrice        Decimal   @db.Decimal(12, 2) // Налоги
  totalPrice      Decimal   @db.Decimal(12, 2) // Итоговая стоимость
  isPaid          Boolean   @default(false) // Оплачен ли заказ
  paidAt          DateTime? @db.Timestamp(6) // Дата оплаты
  isDelivered     Boolean   @default(false) // Доставлен ли заказ
  deliveredAt     DateTime? @db.Timestamp(6) // Дата доставки
  status          String    @default("pending") // "pending", "processing", "shipped", "delivered", "cancelled"
  createdAt       DateTime  @default(now()) @db.Timestamp(6)
  updatedAt       DateTime  @updatedAt @db.Timestamp(6)

  // Связи
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderitems OrderItem[] // Позиции заказа

  @@index([userId])
  @@index([status])
  @@map("orders")
}

// Позиции в заказе
model OrderItem {
  orderId   String  @db.Uuid
  productId String  @db.Uuid
  qty       Int // Количество
  price     Decimal @db.Decimal(12, 2) // Цена на момент заказа
  name      String // Название товара на момент заказа
  slug      String // Slug товара на момент заказа
  image     String // Изображение товара на момент заказа

  // Связи
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId], map: "orderitems_orderId_productId_pk")
  @@map("order_items")
}

// ========================================
// REVIEW MODELS - Модели отзывов
// ========================================

// Отзывы о товарах
model Review {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String // Связь с пользователем
  productId          String   @db.Uuid
  rating             Int // Оценка 1-5
  title              String // Заголовок отзыва
  description        String // Текст отзыва
  isVerifiedPurchase Boolean  @default(true) // Подтвержденная покупка
  isApproved         Boolean  @default(false) // Одобрен ли отзыв модератором
  createdAt          DateTime @default(now()) @db.Timestamp(6)
  updatedAt          DateTime @updatedAt @db.Timestamp(6)

  // Связи
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([userId])
  @@index([isApproved])
  @@map("reviews")
}
