// app/api/static/[...path]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { readFile } from 'fs/promises';
import { join } from 'path';
import { existsSync } from 'fs';

export async function GET(
    request: NextRequest,
    { params }: { params: Promise<{ path: string[] }> }
) {
    try {
        // –ñ–¥–µ–º params —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ Promise –≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö Next.js
        const resolvedParams = await params;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø—É—Ç—å –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑ uploads (–ë–ï–ó –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è app)
        const filePath = join(process.cwd(), 'uploads', ...resolvedParams.path);

        console.log('üìÅ Static file request:', {
            requestedPath: resolvedParams.path,
            fullPath: filePath,
            exists: existsSync(filePath)
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if (!existsSync(filePath)) {
            console.log('‚ùå File not found:', filePath);
            return new NextResponse('File not found', { status: 404 });
        }

        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        const fileBuffer = await readFile(filePath);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        const fileName = resolvedParams.path[resolvedParams.path.length - 1];
        const ext = fileName.split('.').pop()?.toLowerCase();
        let contentType = 'application/octet-stream';

        switch (ext) {
            case 'jpg':
            case 'jpeg':
                contentType = 'image/jpeg';
                break;
            case 'png':
                contentType = 'image/png';
                break;
            case 'webp':
                contentType = 'image/webp';
                break;
            case 'gif':
                contentType = 'image/gif';
                break;
            case 'svg':
                contentType = 'image/svg+xml';
                break;
        }

        console.log('‚úÖ Serving file:', fileName, 'as', contentType);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        return new NextResponse(fileBuffer, {
            headers: {
                'Content-Type': contentType,
                'Cache-Control': 'public, max-age=31536000, immutable',
            },
        });

    } catch (error) {
        console.error('‚ùå Static file error:', error);
        return new NextResponse('Internal Server Error', { status: 500 });
    }
}