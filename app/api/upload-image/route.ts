// app/api/update-image/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { writeFile, mkdir } from 'fs/promises';
import { join } from 'path';
import { existsSync } from 'fs';
import {CreateImage} from "@/lib/validations/product/image-validation";
import {createImage} from "@/lib/actions/catalog/image.action";

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è App Router - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞
export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';
export const maxDuration = 30;

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function generateRandomString(length: number): string {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < length; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
}

export async function POST(request: NextRequest) {
    try {
        console.log('üöÄ Upload started');

        const formData = await request.formData();
        const file = formData.get('file') as File;
        const prefix = formData.get('prefix') as string;

        console.log('üìÑ File info:', {
            name: file?.name,
            size: file?.size,
            type: file?.type,
            prefix
        });

        if (!file) {
            return NextResponse.json(
                { error: 'No file provided' },
                { status: 400 }
            );
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (10MB –º–∞–∫—Å–∏–º—É–º)
        if (file.size > 10 * 1024 * 1024) {
            return NextResponse.json(
                { error: 'File too large. Maximum size is 10MB.' },
                { status: 413 }
            );
        }

        if (!prefix) {
            return NextResponse.json(
                { error: 'No prefix provided' },
                { status: 400 }
            );
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
        if (!allowedTypes.includes(file.type)) {
            return NextResponse.json(
                { error: 'Invalid file type. Only JPEG, PNG, and WebP are allowed.' },
                { status: 400 }
            );
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        const fileExtension = file.name.split('.').pop()?.toLowerCase() || 'jpg';

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        const randomString = generateRandomString(6);
        const fileName = `${prefix}_${randomString}.${fileExtension}`;

        console.log('üìù Generated filename:', fileName);

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –±—É—Ñ–µ—Ä
        const bytes = await file.arrayBuffer();
        const buffer = Buffer.from(bytes);

        console.log('üíæ Buffer created, size:', buffer.length);

        // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ uploads (–ë–ï–ó –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è app)
        const uploadDir = join(process.cwd(), 'uploads');
        const filePath = join(uploadDir, fileName);

        console.log('üìÅ Paths:', {
            uploadDir,
            filePath,
            workingDirectory: process.cwd()
        });

        console.log('üìÇ Directory exists:', existsSync(uploadDir));

        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!existsSync(uploadDir)) {
            console.log('üìÅ Creating update directory...');
            await mkdir(uploadDir, { recursive: true });
            console.log('‚úÖ Upload directory created');
        }

        console.log('üíæ Starting file write...');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        await writeFile(filePath, buffer);

        console.log('‚úÖ File saved successfully to:', filePath);
        console.log('‚úÖ File exists check:', existsSync(filePath));

        // URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
        const fileUrl = `/uploads/${fileName}`;

        console.log('üîó File URL:', fileUrl);

        const createImageData: CreateImage = {
            url: fileUrl,
            filename: fileName,
            alt: '',
            sortOrder: 0,
        }

        console.log('üíæ Saving to database...');
        const createResponse = await createImage(createImageData);
        console.log('createResponse API', createResponse);

        if (createResponse.success) {
            console.log('üéâ Upload completed successfully');
            return NextResponse.json({
                data: createResponse.data
            });
        } else {
            console.error('‚ùå Database error:', createResponse.message);
            return NextResponse.json(
                { error: createResponse.message || 'Failed to save image to database' },
                { status: 500 }
            );
        }

    } catch (error) {
        console.error('‚ùå Upload error:', error);
        return NextResponse.json(
            { error: 'Failed to update file' },
            { status: 500 }
        );
    }
}